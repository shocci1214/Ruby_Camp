require 'dxruby'

#マップデータ
#たて15×よこ17のブロックから成る
#0 何もない（キャラが通過できる） 1　障害物(キャラが通過できない)　2　背景(キャラが通過できる)
@map = [
        [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1],
        [1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]
    ]

#配置パーツ　１ブロック（３２×３２）
@map_tile = []
@map_tile[0] = Image.new(32,32,[30,144,255]) #背景
@map_tile[1] = Image.new(32,32,[255,255,0]) #障害物（ブロック）
@map_tile[2] = Image.new(32,32,[255,255,255]) #背景2(雲)

#キャラクター
@char_tile = Image.new(32,32,[255,0,0])

#30フレームへ変更
Window.fps = 30

#初期値設定
x = 32
y = y_prev = 32
f = 2
jump_ok = false

#対応する配置パーツ番号を返す
def collision_tile(x,y,arr)
    return arr[y/32][x/32]
end


Window.loop do

    #重力の設定
    #Y軸移動増分の設定
    y_move = (y - y_prev) + f #y_prevは1フレーム前のキャラのY座標 fは重力増分
    #座標増分が１ブロックを超えないように補正(すり抜け防止)
    if y_move > 31
        y_move = 31
    end
    y_prev = y
    y += y_move
    f = 2 #f値を初期化しなおす

    #穴に落ちたときの処理
    if y >= 480
        x = 32
        y = y_prev = 0
    end

    #天井衝突
    if(collision_tile(x,y,@map)== 1 or collision_tile(x+31,y,@map) == 1)
        y = y/32 * 32 + 32
    end

    #床衝突判定
    #キャラの右下端と左下端の座標が障害物パーツであった場合
    if collision_tile(x,y+31,@map) == 1 or collision_tile(x+31,y+31,@map) == 1
        y = y/32*32 #32で割って余りを切り捨て、再び掛けたとき、Yが32の倍数になるようにする
        jump_ok = true #地面に接地しているのでジャンプを許可する
    else
        jump_ok = false #地面に接地していないので、ジャンプは許可しない
    end

    #左右移動
    x += Input.x * 2

    #壁(左側)との衝突判定
    if collision_tile(x,y,@map) == 1 or collision_tile(x,y+31,@map) == 1
        x = x/32*32 + 32
    end
    #壁(右側)との衝突判定
    if collision_tile(x+31,y,@map) == 1 or collision_tile(x+31,y+31,@map) == 1
        x = x/32*32
    end

    #ジャンプ
    if Input.key_push?(K_SPACE) and jump_ok
        f = -20
    end

    #map描画
    Window.draw_tile(0,0,@map,@map_tile,0,0,17,15)
    #キャラ描画
    Window.draw(x,y,@char_tile)
end
